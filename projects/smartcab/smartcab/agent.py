import random
import math
from environment import Agent, Environment
from planner import RoutePlanner
from simulator import Simulator


class LearningAgent(Agent):
    """ An agent that learns to drive in the Smartcab world.
        This is the object you will be modifying. """

    def __init__(self, env, learning = False, epsilon = 1.0, alpha = 0.5):
        super(LearningAgent, self).__init__(env)     # Set the agent in the environment
        self.planner = RoutePlanner(self.env, self)  # Create a route planner
        self.valid_actions = self.env.valid_actions  # The set of valid actions

        # Set parameters of the learning agent
        self.learning = learning  # Whether the agent is expected to learn
        self.Q = dict()           # Create a Q-table which will be a dictionary of tuples
        self.epsilon = epsilon    # Random exploration factor
        self.alpha = alpha        # Learning factor

        # Additional parameters
        random.seed(42)
        self.t = 1                # Iteration number

        #########################################
        # Switch according to simulation number #
        #########################################
        # Decay function parameter
        self.a = 0.005            # Simulation 1, 5
        # self.a = 0.95             # Simulation 2
        # self.a = 0.90             # Simulation 3
        # self.a = 0.85             # Simulation 4
        # self.a = None             # Simulation 6
        # self.a = 0.01             # Simulation 7, 9
        # self.a = 0.025            # Simulation 8, 10

    def reset(self, destination = None, testing = False):
        """ The reset function is called at the beginning of each trial.
            'testing' is set to True if testing trials are being used
            once training trials have completed. """

        # Select the destination as the new location to route to
        self.planner.route_to(destination)

        # Update epsilon using a decay function of your choice
        # Update additional class parameters as needed
        # If 'testing' is True, set epsilon and alpha to 0
        if testing:
            self.alpha = 0.0
            self.epsilon = 0.0
        else:
            #########################################
            # Switch according to simulation number #
            #########################################
            self.epsilon = 1.0 - self.a * self.t                           # Simulation 1
            # self.epsilon = self.a ** self.t                                # Simulation 2, 3, 4
            # self.epsilon = math.cos(self.a * self.t * math.pi / 2)         # Simulation 5
            # self.epsilon = 1.0 / (self.t ** 2)                             # Simulation 6
            # self.epsilon = 1.0 - math.tanh(self.a * self.t)                # Simulation 7, 8
            # self.epsilon = math.exp(- self.a * self.t)                     # Simulation 9, 10

        self.t += 1

        return None

    def build_state(self):
        """ The build_state function is called when the agent requests data from the 
            environment. The next waypoint, the intersection inputs, and the deadline 
            are all features available to the agent. """

        # Collect data about the environment
        waypoint = self.planner.next_waypoint()  # The next waypoint
        inputs = self.env.sense(self)            # Visual input - intersection light and traffic
        deadline = self.env.get_deadline(self)   # Remaining deadline

        state = (waypoint, inputs["light"], inputs["oncoming"], inputs["left"])

        return state

    def get_maxQ(self, state):
        """ The get_maxQ function is called when the agent is asked to find the
            maximum Q-value of all actions based on the 'state' the smartcab is in. """

        max_q = max(self.Q[state].values())
        return max_q

    def createQ(self, state):
        """ The createQ function is called when a state is generated by the agent. """

        if state not in self.Q:
            self.Q[state] = {action: 0.0 for action in self.valid_actions}

    def choose_action(self, state):
        """ The choose_action function is called when the agent is asked to choose
            which action to take, based on the 'state' the smartcab is in. """

        # Set the agent state and default action
        self.state = state
        self.next_waypoint = self.planner.next_waypoint()

        # When learning, choose a random action with 'epsilon' probability
        #   Otherwise, choose an action with the highest Q-value for the current state
        use_exploitation = random.uniform(0, 1) > self.epsilon
        if self.learning and use_exploitation:
            state_q = self.Q[state]
            action = max(state_q, key = state_q.get)
        else:
            action = random.choice(self.valid_actions)

        return action

    def learn(self, state, action, reward):
        """ The learn function is called after the agent completes an action and
            receives an award. This function does not consider future rewards 
            when conducting learning. """

        # When learning, implement the value iteration update rule
        #   Use only the learning rate 'alpha' (do not use the discount factor 'gamma')
        if self.learning:
            q = self.Q[state][action]
            self.Q[state][action] = q + self.alpha * (reward - q)
        return

    def update(self):
        """ The update function is called when a time step is completed in the 
            environment for a given trial. This function will build the agent
            state, choose an action, receive a reward, and learn if enabled. """

        state = self.build_state()           # Get current state
        self.createQ(state)                  # Create 'state' in Q-table
        action = self.choose_action(state)   # Choose an action
        reward = self.env.act(self, action)  # Receive a reward
        self.learn(state, action, reward)    # Q-learn

        return
        

def run():
    """ Driving function for running the simulation. 
        Press ESC to close the simulation, or [SPACE] to pause the simulation. """

    ##############
    # Create the environment
    # Flags:
    #   verbose     - set to True to display additional output from the simulation
    #   num_dummies - discrete number of dummy agents in the environment, default is 100
    #   grid_size   - discrete number of intersections (columns, rows), default is (8, 6)
    env = Environment(verbose = True)
    
    ##############
    # Create the driving agent
    # Flags:
    #   learning   - set to True to force the driving agent to use Q-learning
    #    * epsilon - continuous value for the exploration factor, default is 1
    #    * alpha   - continuous value for the learning rate, default is 0.5
    agent = env.create_agent(LearningAgent, learning = True, alpha = 0.05, epsilon = 1)

    ##############
    # Follow the driving agent
    # Flags:
    #   enforce_deadline - set to True to enforce a deadline metric
    env.set_primary_agent(agent, enforce_deadline = True)

    ##############
    # Create the simulation
    # Flags:
    #   update_delay - continuous time (in seconds) between actions, default is 2.0 seconds
    #   display      - set to False to disable the GUI if PyGame is enabled
    #   log_metrics  - set to True to log trial and simulation results to /logs
    #   optimized    - set to True to change the default log file name
    sim = Simulator(env, update_delay = 0.001, display = False, log_metrics = True, optimized = True)

    ##############
    # Run the simulator
    # Flags:
    #   tolerance  - epsilon tolerance before beginning testing, default is 0.05 
    #   n_test     - discrete number of testing trials to perform, default is 0

    #########################################
    # Switch according to simulation number #
    #########################################
    n_trials = 200
    sim.run(n_test = 100, tolerance = 0)                                    # Simulation 1
    # sim.run(n_test = 100, tolerance = 0.95 ** n_trials)                     # Simulation 2
    # sim.run(n_test = 100, tolerance = 0.90 ** n_trials)                     # Simulation 3
    # sim.run(n_test = 100, tolerance = 0.85 ** n_trials)                     # Simulation 4
    # sim.run(n_test = 100, tolerance = math.cos(math.pi / 2))                # Simulation 5
    # sim.run(n_test = 100, tolerance = 1.0 / n_trials ** 2)                  # Simulation 6
    # sim.run(n_test = 100, tolerance = 1.0 - math.tanh(n_trials * 0.01))     # Simulation 7
    # sim.run(n_test = 100, tolerance = 1.0 - math.tanh(n_trials * 0.025))    # Simulation 8
    # sim.run(n_test = 100, tolerance = math.exp(- n_trials * 0.01))          # Simulation 9
    # sim.run(n_test = 100, tolerance = math.exp(- n_trials * 0.025))         # Simulation 10

if __name__ == '__main__':
    run()
